import { logger } from '../../utils/logger.js';
import { InputFile } from 'grammy';
import { normalizePhone, isPhoneAllowed, addNeighbor } from '../../services/auth.js';
import { processImageOCR, processUtilityMeterOCR } from '../../services/ocr.js';
import { extractImageTimestamp, smartDetectPhotoType, validatePhotoWorkflow } from '../../utils/exif.js';
import { 
  createSession, 
  getActiveSession, 
  updateSession, 
  addPhotoToSession, 
  setMeterReading, 
  finishSession, 
  completeSession,
  SESSION_STATES 
} from '../../services/sessiondb.js';

export function setupHandlers(bot) {
  // Handle contact sharing for authorization
  bot.on('message:contact', async (ctx) => {
    const contact = ctx.message.contact;
    const userId = ctx.from.id;
    
    if (!contact) {
      return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.');
    }

    // Check if it's user's own contact
    if (contact.user_id !== userId) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –≤–ª–∞—Å–Ω–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.');
    }

    const phoneE164 = normalizePhone(contact.phone_number);
    
    if (!phoneE164) {
      return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.');
    }

    // Check if phone is in allowed list
    if (!isPhoneAllowed(phoneE164)) {
      logger.warn(`Unauthorized phone attempt: ${phoneE164} from user ${userId}`);
      return ctx.reply(
        '‚ùå –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n' +
        '–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ —Å–∏—Å—Ç–µ–º–∏.'
      );
    }

    try {
      // Add neighbor to database
      const displayName = contact.first_name + (contact.last_name ? ` ${contact.last_name}` : '');
      const neighbor = await addNeighbor(displayName, phoneE164, userId);
      
      logger.info(`Neighbor authorized: ${displayName} (${phoneE164})`);
      
      await ctx.reply(
        `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n\n` +
        `–ü—Ä–∏–≤—ñ—Ç, ${displayName}! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∑–≤—ñ—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—é.\n\n` +
        '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n' +
        'üëÄ /view YYYY-MM - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç\n' +
        '‚úÖ /confirm YYYY-MM - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç',
        {
          reply_markup: {
            keyboard: [
              [{ text: 'üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç' }],
              [{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç' }]
            ],
            resize_keyboard: true
          }
        }
      );

    } catch (error) {
      logger.error('Failed to authorize neighbor:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  });

  // Handle photo uploads (documents)
  bot.on('message:document', async (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }

    const document = ctx.message.document;
    
    // Check if it's an image (including HEIC)
    const imageTypes = ['image/', 'image/heic', 'image/heif'];
    const isImage = imageTypes.some(type => document.mime_type?.startsWith(type));
    
    if (!isImage) {
      return ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.');
    }
    
    // HEIC/HEIF format is now supported via Azure Computer Vision
    let heicFormat = false;
    if (document.mime_type === 'image/heic' || document.mime_type === 'image/heif') {
      heicFormat = true;
      logger.info(`Processing HEIC format image: ${document.file_name}`);
    }

    await ctx.reply(
      `üì∏ <b>–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!</b>\n\n` +
      `üìÑ –§–∞–π–ª: ${document.file_name || 'image'}\n` +
      `üìä –†–æ–∑–º—ñ—Ä: ${(document.file_size / 1024 / 1024).toFixed(2)} –ú–ë\n\n` +
      `üîÑ –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—é –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞...\n\n` +
      `‚è≥ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.`,
      { parse_mode: 'HTML' }
    );

    try {
      // Download and process image
      const file = await ctx.api.getFile(document.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
      
      // Download image buffer
      logger.info(`Downloading image from: ${fileUrl}`);
      const response = await fetch(fileUrl);
      const imageBuffer = await response.arrayBuffer();
      
      // Extract timestamp from image for smart ordering
      const imageBufferNode = Buffer.from(imageBuffer);
      const timestampResult = await extractImageTimestamp(imageBufferNode, document.file_name);
      
      if (timestampResult.success) {
        logger.info(`Photo timestamp extracted (${timestampResult.source}): ${timestampResult.timestamp.toLocaleString('uk-UA')}`);
      } else {
        logger.info('No timestamp found in photo, using session state for type detection');
      }
      
      // Get active session to determine photo type and choose appropriate OCR
      const activeSession = await getActiveSession(ctx.from.id);
      if (!activeSession) {
        await ctx.reply(
          '‚ùå <b>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó</b>\n\n' +
          '–ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑ –∫–Ω–æ–ø–∫–∏ "üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è"',
          { parse_mode: 'HTML' }
        );
        return;
      }
      
      // Smart photo type detection using EXIF timestamps
      const existingPhotosWithTimestamps = activeSession.photos
        .filter(p => p.timestamp)
        .map(p => ({ timestamp: new Date(p.timestamp) }));
      
      const detectedPhotoType = timestampResult.success ? 
        smartDetectPhotoType(activeSession, timestampResult.timestamp, existingPhotosWithTimestamps) :
        (activeSession.state === SESSION_STATES.STARTED ? '–î–û' : 
         !activeSession.meterAfter ? '–ü–Ü–°–õ–Ø' : '–ï–ö–†–ê–ù');
      
      logger.info(`Smart photo type detection: ${detectedPhotoType}`);
      
      // Determine OCR approach based on detected type
      let isUtilityMeter = false;
      if (detectedPhotoType === '–î–û' || detectedPhotoType === '–ü–Ü–°–õ–Ø') {
        isUtilityMeter = true; // Utility meter photos need specialized OCR
      }
      
      // Choose appropriate OCR method with timeout
      let ocrResult;
      
      // Add timeout to prevent hanging
      const ocrTimeout = 30000; // 30 seconds timeout
      
      try {
        // Prepare context for OCR validation
        const ocrContext = {};
        if (isUtilityMeter && activeSession.meterBefore) {
          ocrContext.previousReading = activeSession.meterBefore;
          ocrContext.expectedRange = [activeSession.meterBefore, activeSession.meterBefore + 50];
        }
        
        if (isUtilityMeter) {
          logger.info('Using utility meter OCR for better number recognition');
          ocrResult = await Promise.race([
            processUtilityMeterOCR(imageBufferNode, { context: ocrContext }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('OCR timeout')), ocrTimeout)
            )
          ]);
        } else {
          logger.info('Using standard OCR');
          ocrResult = await Promise.race([
            processImageOCR(imageBufferNode, { context: ocrContext }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('OCR timeout')), ocrTimeout)
            )
          ]);
        }
      } catch (error) {
        logger.error('OCR processing failed or timed out:', error);
        ocrResult = {
          success: false,
          error: error.message,
          reading: null
        };
      }
      
      if (ocrResult.success && ocrResult.reading) {

        // Add photo to session with timestamp and detected type
        const photoMetadata = {
          type: detectedPhotoType === '–î–û' ? 'before' : 
                detectedPhotoType === '–ü–Ü–°–õ–Ø' ? 'after' : 'screen',
          fileId: document.file_id,
          fileName: document.file_name || 'image',
          fileSize: document.file_size,
          mimeType: document.mime_type,
          ocrResult: ocrResult,
          detectedType: detectedPhotoType,
          timestamp: timestampResult.success ? timestampResult.timestamp.toISOString() : null,
          timestampSource: timestampResult.source
        };
        
        await addPhotoToSession(activeSession.id, photoMetadata);

        // Prepare chronology info if timestamp available
        let chronologyInfo = '';
        if (timestampResult.success) {
          chronologyInfo = `\nüìÖ –ß–∞—Å –∑–π–æ–º–∫–∏: ${timestampResult.timestamp.toLocaleString('uk-UA')} (${timestampResult.source})`;
          
          // Check workflow if we have multiple photos
          const updatedSession = await getActiveSession(ctx.from.id);
          if (updatedSession.photos.length > 1) {
            const photosWithTimestamps = updatedSession.photos
              .filter(p => p.timestamp)
              .map(p => ({
                timestamp: new Date(p.timestamp),
                detectedType: p.detectedType || '–ù–ï–í–Ü–î–û–ú–û'
              }));
            
            if (photosWithTimestamps.length > 1) {
              const sortedPhotos = photosWithTimestamps.sort((a, b) => a.timestamp - b.timestamp);
              const actualOrder = sortedPhotos.map(p => p.detectedType).join(' ‚Üí ');
              chronologyInfo += `\nüìä –ü–æ—Ä—è–¥–æ–∫ —Ñ–æ—Ç–æ: ${actualOrder}`;
              
              const workflow = validatePhotoWorkflow(sortedPhotos);
              if (workflow.isValid) {
                chronologyInfo += '\n‚úÖ –•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ä–æ–±–æ—á–æ–º—É –ø—Ä–æ—Ü–µ—Å—É';
              }
            }
          }
        }
        
        await ctx.reply(
          `‚úÖ <b>–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n` +
          `üÜî –°–µ—Å—ñ—è: #${activeSession.id}\n` +
          `üì∏ –¢–∏–ø —Ñ–æ—Ç–æ: ${detectedPhotoType} (${timestampResult.success ? '–∞–≤—Ç–æ-–≤–∏–∑–Ω–∞—á–µ–Ω–æ' : '–∑–∞ —Å—Ç–∞–Ω–æ–º —Å–µ—Å—ñ—ó'})\n` +
          `üî¢ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏: <b>${ocrResult.reading}</b> –∫–í—Ç¬∑–≥–æ–¥\n` +
          `üìä –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${ocrResult.confidence}%${chronologyInfo}\n\n` +
          '–ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏?',
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –¢–∞–∫, –ø—Ä–∞–≤–∏–ª—å–Ω–æ', callback_data: `confirm_reading_${ocrResult.reading}_${activeSession.id}` },
                  { text: '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data: `edit_reading_${activeSession.id}` }
                ]
              ]
            }
          }
        );
      } else {
        // Get active session for context
        const activeSession = await getActiveSession(ctx.from.id);
        const sessionInfo = activeSession ? `\nüÜî –°–µ—Å—ñ—è: #${activeSession.id}` : '';
        
        await ctx.reply(
          `‚ùå <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏</b>${sessionInfo}\n\n` +
          `üîç –ü—Ä–∏—á–∏–Ω–∞: ${ocrResult.error || '–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}\n\n` +
          '–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –±—ñ–ª—å—à —á—ñ—Ç–∫–µ —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –≤—Ä—É—á–Ω—É.',
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É', callback_data: activeSession ? `edit_reading_${activeSession.id}` : 'edit_reading' },
                  { text: 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—à–µ —Ñ–æ—Ç–æ', callback_data: 'resend_as_document' }
                ]
              ]
            }
          }
        );
      }

    } catch (error) {
      logger.error('Failed to process image:', error);
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  });

  // Handle regular photos (with compression warning)
  bot.on('message:photo', async (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–µ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }

    await ctx.reply(
      '‚ö†Ô∏è <b>–£–≤–∞–≥–∞: –°—Ç–∏—Å–Ω–µ–Ω–µ —Ñ–æ—Ç–æ</b>\n\n' +
      '–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Å—Ç–∏—Å–Ω–µ–Ω–µ —Ñ–æ—Ç–æ. –î–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —è–∫ <b>–¥–æ–∫—É–º–µ–Ω—Ç</b>.\n\n' +
      '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É —Å—Ç–∏—Å–Ω–µ–Ω–æ–≥–æ —Ñ–æ—Ç–æ?',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏', callback_data: 'process_compressed' },
              { text: 'üìÑ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç', callback_data: 'resend_as_document' }
            ]
          ]
        }
      }
    );
  });

  // Handle callback queries (inline buttons)
  bot.on('callback_query', async (ctx) => {
    const data = ctx.callbackQuery.data;
    
    try {
      if (data === 'send_before_photo') {
        await ctx.editMessageText(
          'üì∏ <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –î–û –∑–∞—Ä—è–¥–∫–∏</b>\n\n' +
          'üîç –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ.\n' +
          'üìÑ –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è EXIF-–¥–∞–Ω–∏—Ö.',
          { parse_mode: 'HTML' }
        );
      } else if (data === 'send_after_photo') {
        // Check session state to determine what photo is actually needed
        const currentSession = await getActiveSession(ctx.from.id);
        if (currentSession && currentSession.kwhScreen && !currentSession.meterAfter) {
          await ctx.editMessageText(
            'üì∏ <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ü–Ü–°–õ–Ø –∑–∞—Ä—è–¥–∫–∏</b>\n\n' +
            'üîç –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ.\n' +
            'üìä –ë—ñ–ª—ñ —Ü–∏—Ñ—Ä–∏ –Ω–∞ —á–æ—Ä–Ω–æ–º—É —Ñ–æ–Ω—ñ, –¥–µ—Å—è—Ç—ñ —á–∞—Å—Ç–∏–Ω–∏ –Ω–∞ —á–µ—Ä–≤–æ–Ω–æ–º—É.',
            { parse_mode: 'HTML' }
          );
        } else {
          await ctx.editMessageText(
            'üì∏ <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ü–Ü–°–õ–Ø –∑–∞—Ä—è–¥–∫–∏</b>\n\n' +
            'üîç –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ.',
            { parse_mode: 'HTML' }
          );
        }
      } else if (data === 'send_screen_photo') {
        await ctx.editMessageText(
          'üì± <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –µ–∫—Ä–∞–Ω–∞ –∑–∞—Ä—è–¥–Ω–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó</b>\n\n' +
          '‚ö° –ú–∞—î –±—É—Ç–∏ –≤–∏–¥–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ–∂–∏—Ç–∏—Ö –∫–í—Ç¬∑–≥–æ–¥.\n' +
          'üìä –ë—ñ–ª—ñ —Ü–∏—Ñ—Ä–∏ –Ω–∞ —Å–∏–Ω—å–æ–º—É —Ñ–æ–Ω—ñ, –∑–∞–∑–≤–∏—á–∞–π –º–µ–Ω—à–µ 20 –∫–í—Ç¬∑–≥–æ–¥.',
          { parse_mode: 'HTML' }
        );
      } else if (data === 'complete_without_screen') {
        // Complete session without screen photo
        const activeSession = await getActiveSession(ctx.from.id);
        if (activeSession && activeSession.meterBefore && activeSession.meterAfter) {
          try {
            // Check if we have a tariff for this month to complete the session
            const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM
            const { getTariff } = await import('../../services/tariffs.js');
            const tariff = await getTariff(currentMonth);
            
            if (tariff) {
              // Complete the session with tariff
              const completedSession = await completeSession(activeSession.id, tariff.priceUahPerKwh);
              
              await ctx.editMessageText(
                '‚úÖ <b>–°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ –µ–∫—Ä–∞–Ω–∞</b>\n\n' +
                `üÜî –°–µ—Å—ñ—è: #${completedSession.id}\n` +
                `‚ö° –°–ø–æ–∂–∏—Ç–æ –∑–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º: ${completedSession.kwhCalculated.toFixed(2)} –∫–í—Ç¬∑–≥–æ–¥\n` +
                `üí∞ –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: ${completedSession.amountUah.toFixed(2)} –≥—Ä–Ω\n` +
                `üìä –¢–∞—Ä–∏—Ñ: ${tariff.priceUahPerKwh.toFixed(2)} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥\n\n` +
                '‚úÖ –°–µ—Å—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.',
                { parse_mode: 'HTML' }
              );
            } else {
              // No tariff available - can't complete
              await ctx.editMessageText(
                '‚ùå <b>–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é</b>\n\n' +
                `–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞—Ä–∏—Ñ –¥–ª—è ${currentMonth}.\n\n` +
                `–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç–∞—Ä–∏—Ñ: <code>/tariff ${currentMonth} 7.41</code>\n` +
                '–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó.',
                { parse_mode: 'HTML' }
              );
            }
          } catch (error) {
            logger.error('Error completing session without screen:', error);
            await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó.');
          }
        } else {
          await ctx.editMessageText(
            '‚ùå <b>–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é</b>\n\n' +
            '–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –î–û —Ç–∞ –ü–Ü–°–õ–Ø –∑–∞—Ä—è–¥–∫–∏.',
            { parse_mode: 'HTML' }
          );
        }
      } else if (data.startsWith('confirm_reading_')) {
        const parts = data.replace('confirm_reading_', '').split('_');
        const reading = parts[0];
        const sessionId = parts[1] ? parseInt(parts[1]) : null;
        
        if (sessionId) {
          try {
            const session = await getActiveSession(ctx.from.id);
            if (session && session.id === sessionId) {
              // Determine reading type based on session state
              const readingType = session.state === SESSION_STATES.STARTED ? 'before' : 'after';
              
              // Set meter reading in session
              const updatedSession = await setMeterReading(sessionId, readingType, parseFloat(reading), 'ocr');
              
              let nextStepMessage = '';
              if (readingType === 'before') {
                nextStepMessage = '\n\n‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∑–∞—Ä—è–¥–∫—É —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ü–Ü–°–õ–Ø.';
              } else if (updatedSession.meterBefore && updatedSession.meterAfter) {
                const kwhUsed = updatedSession.kwhCalculated;
                nextStepMessage = `\n\n‚ö° –°–ø–æ–∂–∏—Ç–æ: <b>${kwhUsed}</b> –∫–í—Ç¬∑–≥–æ–¥\n‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –µ–∫—Ä–∞–Ω–∞ –∑–∞—Ä—è–¥–Ω–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó.`;
              }
              
              await ctx.editMessageText(
                `‚úÖ <b>–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</b>\n\n` +
                `üÜî –°–µ—Å—ñ—è: #${sessionId}\n` +
                `üî¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: <b>${reading}</b> –∫–í—Ç¬∑–≥–æ–¥ (${readingType === 'before' ? '–î–û' : '–ü–Ü–°–õ–Ø'})${nextStepMessage}`,
                { parse_mode: 'HTML' }
              );
            } else {
              throw new Error('–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
            }
          } catch (error) {
            logger.error('Error confirming reading:', error);
            await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.');
          }
        } else {
          // Legacy format without session ID
          await ctx.editMessageText(
            `‚úÖ <b>–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</b>\n\n` +
            `üî¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: <b>${reading}</b> –∫–í—Ç¬∑–≥–æ–¥\n\n` +
            '–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º –ø—Ä–æ—Ü–µ—Å—É.',
            { parse_mode: 'HTML' }
          );
        }
      } else if (data.startsWith('edit_reading')) {
        const sessionId = data.includes('_') ? data.split('_')[2] : null;
        const sessionInfo = sessionId ? `\nüÜî –°–µ—Å—ñ—è: #${sessionId}` : '';
        
        await ctx.editMessageText(
          '‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤</b>' + sessionInfo + '\n\n' +
          '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ: <b>12345.67</b>',
          { parse_mode: 'HTML' }
        );
      } else if (data === 'process_compressed') {
        await ctx.editMessageText(
          '‚ùå <b>OCR –¥–ª—è —Å—Ç–∏—Å–Ω–µ–Ω–∏—Ö —Ñ–æ—Ç–æ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</b>\n\n' +
          '–°–ø—Ä–æ–±—É–π—Ç–µ:\n' +
          '‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç (JPG —Ñ–æ—Ä–º–∞—Ç)\n' +
          '‚Ä¢ –ê–±–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –≤—Ä—É—á–Ω—É',
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É', callback_data: 'edit_reading' }]
              ]
            }
          }
        );
      } else if (data === 'resend_as_document') {
        await ctx.editMessageText(
          'üìÑ <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç</b>\n\n' +
          '1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (üìé)\n' +
          '2. –í–∏–±–µ—Ä—ñ—Ç—å "–§–∞–π–ª" –∑–∞–º—ñ—Å—Ç—å "–§–æ—Ç–æ"\n' +
          '3. –û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≥–∞–ª–µ—Ä–µ—ó\n' +
          '4. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç',
          { parse_mode: 'HTML' }
        );
      } else if (data.startsWith('confirm_meter_after_') || data.startsWith('confirm_screen_')) {
        await handleReadingTypeConfirmation(ctx, data);
      } else if (data.startsWith('report_')) {
        await handleReportCallback(ctx, data);
      } else if (data === 'continue_session') {
        const activeSession = await getActiveSession(ctx.from.id);
        if (activeSession) {
          let nextStep = '';
          if (activeSession.state === SESSION_STATES.STARTED) {
            nextStep = '‚û°Ô∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –î–û –∑–∞—Ä—è–¥–∫–∏';
          } else if (activeSession.state === SESSION_STATES.BEFORE_PHOTO_UPLOADED) {
            nextStep = '‚û°Ô∏è –ó–∞–≤–µ—Ä—à—ñ—Ç—å –∑–∞—Ä—è–¥–∫—É —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ü–Ü–°–õ–Ø';
          } else {
            nextStep = '‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º';
          }
          
          await ctx.editMessageText(
            '‚û°Ô∏è <b>–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å–µ—Å—ñ—é</b>\n\n' +
            `üÜî –°–µ—Å—ñ—è: #${activeSession.id}\n` +
            `üîÑ –°—Ç–∞—Ç—É—Å: ${activeSession.state}\n\n` +
            nextStep,
            { parse_mode: 'HTML' }
          );
        }
      } else if (data === 'force_new_session') {
        const activeSession = await getActiveSession(ctx.from.id);
        if (activeSession) {
          // Mark old session as finished
          await finishSession(activeSession.id);
        }
        
        // Create new session
        const newSession = await createSession(ctx.from.id);
        await ctx.editMessageText(
          'üÜï <b>–ù–æ–≤–∞ —Å–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞!</b>\n\n' +
          `üÜî –ù–æ–º–µ—Ä —Å–µ—Å—ñ—ó: #${newSession.id}\n` +
          `üïê –ü–æ—á–∞—Ç–æ: ${newSession.startedAt.toLocaleString('uk-UA')}\n\n` +
          '–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ <b>–î–û</b> –∑–∞—Ä—è–¥–∫–∏.',
          { parse_mode: 'HTML' }
        );
      }
      
      await ctx.answerCallbackQuery();
      
    } catch (error) {
      logger.error('Callback query error:', error);
      await ctx.answerCallbackQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  });

  // Handle manual reading input
  bot.on('message:text', async (ctx) => {
    const text = ctx.message.text.trim();
    
    // Skip commands
    if (text.startsWith('/')) {
      return;
    }

    // Check if it's a meter reading or tariff (number format) - handle both comma and dot
    const numberMatch = text.match(/^(\d+(?:[.,]\d{1,2})?)$/);
    if (numberMatch && ctx.isOwner) {
      const cleanNumber = numberMatch[1].replace(',', '.');
      const number = parseFloat(cleanNumber);
      
      // Check if there's an active session first - prioritize meter readings
      const activeSession = await getActiveSession(ctx.from.id);
      
      if (activeSession) {
        // There's an active session, treat as meter reading
        try {
          // Smart logic to determine what type of reading this is
          let readingType;
          let isScreenReading = false;
          
          logger.info(`Processing number: ${number}, session state: ${activeSession.state}, meterBefore: ${activeSession.meterBefore}`);
          
          if (activeSession.state === SESSION_STATES.STARTED) {
            // First reading is always meter BEFORE
            readingType = 'before';
            logger.info('Determined as BEFORE reading (session just started)');
          } else if (activeSession.state === SESSION_STATES.BEFORE_PHOTO_UPLOADED || 
                    activeSession.state === SESSION_STATES.FINISHED) {
            // After /finish, determine if it's meter AFTER or screen reading
            if (number < 20) {
              // Small number (< 20 kWh) = likely screen reading
              isScreenReading = true;
              readingType = 'screen';
              logger.info(`Determined as SCREEN reading (${number} < 20)`);
            } else if (activeSession.meterBefore && number > activeSession.meterBefore) {
              // Large number > previous meter reading = meter AFTER
              readingType = 'after';
              logger.info(`Determined as AFTER reading (${number} > ${activeSession.meterBefore})`);
            } else {
              // Fallback: if it's ambiguous, ask user
              await ctx.reply(
                `‚ùì <b>–£—Ç–æ—á–Ω–µ–Ω–Ω—è —Ç–∏–ø—É –ø–æ–∫–∞–∑–Ω–∏–∫–∞</b>\n\n` +
                `–í–≤–µ–¥–µ–Ω–æ: <b>${number}</b>\n\n` +
                `üìä –ü–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –î–û: <b>${activeSession.meterBefore}</b>\n\n` +
                '–©–æ —Ü–µ –∑–∞ –ø–æ–∫–∞–∑–Ω–∏–∫?',
                {
                  parse_mode: 'HTML',
                  reply_markup: {
                    inline_keyboard: [
                      [
                        { text: 'üî¢ –õ—ñ—á–∏–ª—å–Ω–∏–∫ –ü–Ü–°–õ–Ø', callback_data: `confirm_meter_after_${number}_${activeSession.id}` },
                        { text: 'üì± –ï–∫—Ä–∞–Ω –∑–∞—Ä—è–¥–∫–∏', callback_data: `confirm_screen_${number}_${activeSession.id}` }
                      ]
                    ]
                  }
                }
              );
              return;
            }
          } else {
            // Default fallback
            readingType = 'after';
          }
          
          let updatedSession;
          if (isScreenReading) {
            // Update session with screen reading (kWh consumed)
            updatedSession = await updateSession(activeSession.id, {
              kwhScreen: number
            });
          } else {
            // Set meter reading in session
            updatedSession = await setMeterReading(activeSession.id, readingType, number, 'manual');
          }
          
          let nextStepMessage = '';
          let displayType = '';
          
          if (isScreenReading) {
            displayType = '–ï–∫—Ä–∞–Ω –∑–∞—Ä—è–¥–∫–∏';
            nextStepMessage = '\n\n‚úÖ –î–∞–Ω—ñ –∑ –µ–∫—Ä–∞–Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ü–Ü–°–õ–Ø –∑–∞—Ä—è–¥–∫–∏.';
          } else if (readingType === 'before') {
            displayType = '–õ—ñ—á–∏–ª—å–Ω–∏–∫ –î–û';
            nextStepMessage = '\n\n‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∑–∞—Ä—è–¥–∫—É —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ü–Ü–°–õ–Ø.';
          } else if (readingType === 'after') {
            displayType = '–õ—ñ—á–∏–ª—å–Ω–∏–∫ –ü–Ü–°–õ–Ø';
            if (updatedSession.meterBefore && updatedSession.meterAfter) {
              const kwhUsed = updatedSession.kwhCalculated;
              nextStepMessage = `\n\n‚ö° –°–ø–æ–∂–∏—Ç–æ –∑–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º: <b>${kwhUsed.toFixed(2)}</b> –∫–í—Ç¬∑–≥–æ–¥`;
              if (updatedSession.kwhScreen) {
                nextStepMessage += `\nüì± –ó–∞ –µ–∫—Ä–∞–Ω–æ–º: <b>${updatedSession.kwhScreen}</b> –∫–í—Ç¬∑–≥–æ–¥`;
              }
              nextStepMessage += '\n\n‚úÖ –°–µ—Å—ñ—è –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è!';
            } else {
              nextStepMessage = '\n\n‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –µ–∫—Ä–∞–Ω–∞ –∑–∞—Ä—è–¥–Ω–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó.';
            }
          }
          
          await ctx.reply(
            `‚úÖ <b>–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—Ä–∏–π–Ω—è—Ç–æ</b>\n\n` +
            `üÜî –°–µ—Å—ñ—è: #${activeSession.id}\n` +
            `üî¢ –í–≤–µ–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É: <b>${number}</b> –∫–í—Ç¬∑–≥–æ–¥\n` +
            `üìä –¢–∏–ø: <b>${displayType}</b>${nextStepMessage}`,
            { parse_mode: 'HTML' }
          );
        } catch (error) {
          logger.error('Error setting manual reading:', error);
          await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.');
        }
      } else {
        // No active session - direct to proper commands
        if (number < 50) {
          // Likely a tariff rate
          const currentMonth = new Date().toISOString().slice(0, 7);
          await ctx.reply(
            `üí∞ <b>–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É</b>\n\n` +
            `–û—Ç—Ä–∏–º–∞–Ω–æ: <b>${number}</b> (–π–º–æ–≤—ñ—Ä–Ω–æ —Ç–∞—Ä–∏—Ñ)\n\n` +
            `–î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n` +
            `<code>/tariff ${currentMonth} ${number}</code>\n\n` +
            'üí° –ü—Ä–∏–∫–ª–∞–¥: <code>/tariff 2025-08 7.41</code>',
            { parse_mode: 'HTML' }
          );
        } else {
          // Large number without active session
          await ctx.reply(
            `‚ùì <b>–û—Ç—Ä–∏–º–∞–Ω–æ —á–∏—Å–ª–æ: ${number}</b>\n\n` +
            '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞.\n\n' +
            'üÜï –î–ª—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞: –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ù–æ–≤–∞ —Å–µ—Å—ñ—è"\n' +
            'üí∞ –î–ª—è —Ç–∞—Ä–∏—Ñ—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ <code>/tariff YYYY-MM —Ü—ñ–Ω–∞</code>',
            { parse_mode: 'HTML' }
          );
        }
      }
      return;
    }

    // Handle keyboard buttons
    if (ctx.isOwner) {
      switch (text) {
        case 'üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è':
          // Check if there's already an active session
          const activeSession = await getActiveSession(ctx.from.id);
          if (activeSession) {
            await ctx.reply(
              '‚ö†Ô∏è <b>–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è</b>\n\n' +
              `üÜî –°–µ—Å—ñ—è #${activeSession.id}\n` +
              `üóìÔ∏è –ü–æ—á–∞—Ç–æ: ${activeSession.startedAt.toLocaleString('uk-UA')}\n` +
              `üîÑ –°—Ç–∞—Ç—É—Å: ${activeSession.state}\n\n` +
              '–ü—Ä–æ–¥–æ–≤–∂—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å —ó—ó?',
              {
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏', callback_data: 'continue_session' }],
                    [{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É', callback_data: 'force_new_session' }]
                  ]
                }
              }
            );
            return;
          }
          
          // Create new session
          const newSession = await createSession(ctx.from.id);
          await ctx.reply(
            'üÜï <b>–ù–æ–≤–∞ —Å–µ—Å—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞!</b>\n\n' +
            `üÜî –ù–æ–º–µ—Ä —Å–µ—Å—ñ—ó: #${newSession.id}\n` +
            `üïê –ü–æ—á–∞—Ç–æ: ${newSession.startedAt.toLocaleString('uk-UA')}\n\n` +
            '–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ <b>–î–û</b> –∑–∞—Ä—è–¥–∫–∏.\n\n' +
            'üì∏ <b>–í–∞–∂–ª–∏–≤–æ:</b> –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —è–∫ <b>–î–æ–∫—É–º–µ–Ω—Ç/–§–∞–π–ª</b>, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ EXIF-–¥–∞–Ω—ñ.\n\n' +
            'üí° <i>–ü—ñ–¥–∫–∞–∑–∫–∞: –£ Telegram –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ –≤–∏–±–µ—Ä—ñ—Ç—å "–ë–µ–∑ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è" –∞–±–æ "–Ø–∫ —Ñ–∞–π–ª".</i>',
            { 
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [[
                  { text: 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –î–û', callback_data: 'send_before_photo' }
                ]]
              }
            }
          );
          return;
        case 'üìä –°—Ç–∞—Ç—É—Å':
          const currentActiveSession = await getActiveSession(ctx.from.id);
          const currentMonth = new Date().toISOString().slice(0, 7);
          
          if (currentActiveSession) {
            await ctx.reply(
              'üìä <b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å</b>\n\n' +
              'üîÑ <b>–ê–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è:</b>\n' +
              `üÜî #${currentActiveSession.id}\n` +
              `üïê –ü–æ—á–∞—Ç–æ: ${currentActiveSession.startedAt.toLocaleString('uk-UA')}\n` +
              `üîÑ –°—Ç–∞—Ç—É—Å: ${currentActiveSession.state}\n` +
              `üì∏ –§–æ—Ç–æ: ${currentActiveSession.photos.length}\n\n` +
              `üí∞ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ: ${process.env.DEFAULT_RATE_UAH || '5.50'} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥\n\n` +
              'üìà –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /report ' + currentMonth,
              { parse_mode: 'HTML' }
            );
          } else {
            await ctx.reply(
              'üìä <b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å</b>\n\n' +
              'üîÑ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: 0\n' +
              'üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö\n' +
              `üí∞ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ: ${process.env.DEFAULT_RATE_UAH || '5.50'} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥\n\n` +
              'üìà –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /report ' + currentMonth,
              { parse_mode: 'HTML' }
            );
          }
          return;
        case 'üìà –ó–≤—ñ—Ç–∏':
          const reportMonth = new Date().toISOString().slice(0, 7); // 2025-08
          return ctx.reply(`üìà –ó–≤—ñ—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å: /report ${reportMonth}\n\n–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /report YYYY-MM\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /report 2025-01`);
        case 'üí∞ –¢–∞—Ä–∏—Ñ–∏':
          const currentMonthTariff = new Date().toISOString().slice(0, 7); // 2025-08
          await ctx.reply(`üí∞ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ ${currentMonthTariff}:\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–Ω –∑–∞ –∫–í—Ç¬∑–≥–æ–¥\n–ü—Ä–∏–∫–ª–∞–¥–∏: 5.50 –∞–±–æ 5,50 –∞–±–æ 6.20`);
          return;
      }
    }

    if (ctx.userRole === 'NEIGHBOR') {
      switch (text) {
        case 'üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç':
          return ctx.reply('üëÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /view YYYY-MM\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /view 2025-01');
        case '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç':
          return ctx.reply('‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /confirm YYYY-MM\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /confirm 2025-01');
      }
    }
  });

  // Handle reading type confirmation
  async function handleReadingTypeConfirmation(ctx, data) {
    try {
      const parts = data.split('_');
      const type = parts[1]; // 'meter' or 'screen'
      const subtype = parts[2]; // 'after' for meter
      const number = parseFloat(parts[type === 'meter' ? 3 : 2]);
      const sessionId = parseInt(parts[type === 'meter' ? 4 : 3]);
      
      const session = await getActiveSession(ctx.from.id);
      if (!session || session.id !== sessionId) {
        await ctx.editMessageText('‚ùå –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.');
        return;
      }
      
      let updatedSession;
      let displayType;
      let nextStepMessage = '';
      
      if (type === 'meter' && subtype === 'after') {
        // Confirm meter AFTER reading
        updatedSession = await setMeterReading(sessionId, 'after', number, 'manual');
        displayType = '–õ—ñ—á–∏–ª—å–Ω–∏–∫ –ü–Ü–°–õ–Ø';
        
        if (updatedSession.meterBefore && updatedSession.meterAfter) {
          const kwhUsed = updatedSession.kwhCalculated;
          nextStepMessage = `\n\n‚ö° –°–ø–æ–∂–∏—Ç–æ –∑–∞ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–æ–º: <b>${kwhUsed.toFixed(2)}</b> –∫–í—Ç¬∑–≥–æ–¥`;
          if (updatedSession.kwhScreen) {
            nextStepMessage += `\nüì± –ó–∞ –µ–∫—Ä–∞–Ω–æ–º: <b>${updatedSession.kwhScreen}</b> –∫–í—Ç¬∑–≥–æ–¥`;
          }
          nextStepMessage += '\n\n‚úÖ –°–µ—Å—ñ—è –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è!';
        }
      } else if (type === 'screen') {
        // Confirm screen reading
        updatedSession = await updateSession(sessionId, { kwhScreen: number });
        displayType = '–ï–∫—Ä–∞–Ω –∑–∞—Ä—è–¥–∫–∏';
        nextStepMessage = '\n\n‚úÖ –î–∞–Ω—ñ –∑ –µ–∫—Ä–∞–Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞ –ü–Ü–°–õ–Ø –∑–∞—Ä—è–¥–∫–∏.';
      }
      
      await ctx.editMessageText(
        `‚úÖ <b>–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</b>\n\n` +
        `üÜî –°–µ—Å—ñ—è: #${sessionId}\n` +
        `üî¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: <b>${number}</b> –∫–í—Ç¬∑–≥–æ–¥\n` +
        `üìä –¢–∏–ø: <b>${displayType}</b>${nextStepMessage}`,
        { parse_mode: 'HTML' }
      );
      
    } catch (error) {
      logger.error('Error confirming reading type:', error);
      await ctx.editMessageText('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.');
    }
  }

  // Handle report callback buttons
  async function handleReportCallback(ctx, data) {
    const { 
      generateMonthlySummary, 
      generateMonthlyPDF, 
      generateMonthlyCSV, 
      saveReportToFile, 
      cleanupTempFile 
    } = await import('../../services/reports.js');
    
    try {
      const parts = data.split('_');
      const format = parts[1]; // summary, pdf, csv
      const yearMonth = parts[2]; // 2025-08
      
      await ctx.editMessageText(
        `‚è≥ <b>–ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è ${format.toUpperCase()} –∑–≤—ñ—Ç –∑–∞ ${yearMonth}</b>\n\n` +
        '–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...',
        { parse_mode: 'HTML' }
      );
      
      if (format === 'summary') {
        // Generate text summary
        const summary = await generateMonthlySummary(ctx.from.id, yearMonth);
        await ctx.editMessageText(summary, { parse_mode: 'HTML' });
        
      } else if (format === 'pdf') {
        // Generate PDF report
        const pdfBuffer = await generateMonthlyPDF(ctx.from.id, yearMonth);
        const filename = `EV_Report_${yearMonth}.pdf`;
        const filePath = await saveReportToFile(pdfBuffer, filename);
        
        await ctx.editMessageText(
          `‚úÖ <b>PDF –∑–≤—ñ—Ç –≥–æ—Ç–æ–≤–∏–π!</b>\n\n` +
          `üìÖ –ü–µ—Ä—ñ–æ–¥: ${yearMonth}\n` +
          `üìÑ –§–∞–π–ª: ${filename}\n\n` +
          '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...',
          { parse_mode: 'HTML' }
        );
        
        // Send PDF as document
        await ctx.api.sendDocument(ctx.chat.id, new InputFile(filePath), {
          caption: `üìä PDF –∑–≤—ñ—Ç –ø—Ä–æ –∑–∞—Ä—è–¥–∫—É –ï–ú –∑–∞ ${yearMonth}`
        });
        
        // Cleanup temp file
        setTimeout(() => cleanupTempFile(filePath), 5000);
        
      } else if (format === 'csv') {
        // Generate CSV report
        const csvBuffer = await generateMonthlyCSV(ctx.from.id, yearMonth);
        const filename = `EV_Report_${yearMonth}.csv`;
        const filePath = await saveReportToFile(csvBuffer, filename);
        
        await ctx.editMessageText(
          `‚úÖ <b>CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏–π!</b>\n\n` +
          `üìÖ –ü–µ—Ä—ñ–æ–¥: ${yearMonth}\n` +
          `üìä –§–∞–π–ª: ${filename}\n\n` +
          '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...',
          { parse_mode: 'HTML' }
        );
        
        // Send CSV as document
        await ctx.api.sendDocument(ctx.chat.id, new InputFile(filePath), {
          caption: `üìä CSV –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞—Ä—è–¥–∫—É –ï–ú –∑–∞ ${yearMonth}`
        });
        
        // Cleanup temp file
        setTimeout(() => cleanupTempFile(filePath), 5000);
      }
      
    } catch (error) {
      logger.error('Error handling report callback:', error);
      await ctx.editMessageText(
        '‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É</b>\n\n' +
        '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.',
        { parse_mode: 'HTML' }
      );
    }
  }

  logger.info('Bot handlers initialized');
}