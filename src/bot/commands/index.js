import { logger } from '../../utils/logger.js';
import { 
  generateMonthlySummary, 
  generateMonthlyPDF, 
  generateMonthlyCSV, 
  saveReportToFile, 
  cleanupTempFile,
  getAvailableReportMonths 
} from '../../services/reports.js';
import { setTariff, getTariff, getAllTariffs } from '../../services/tariffs.js';

export function setupCommands(bot) {
  // Start command - available for everyone
  bot.command('start', async (ctx) => {
    const userName = ctx.from.first_name || ctx.from.username || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';
    logger.info(`/start command: isOwner=${ctx.isOwner}, userName=${userName}`);
    
    if (ctx.isOwner) {
      logger.info('Sending owner start message...');
      await ctx.reply(
        `–ü—Ä–∏–≤—ñ—Ç, ${userName}! üëã\n\n` +
        '–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ –≤–ª–∞—Å–Ω–∏–∫. –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n' +
        'üÜï /new - –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑–∞—Ä—è–¥–∫–∏\n' +
        'üèÅ /finish - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é\n' +
        'üìä /status - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å\n' +
        'üìà /report YYYY-MM - –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å\n' +
        'üí∞ /tariff YYYY-MM value - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ\n' +
        'üë• /setneighbor - –î–æ–¥–∞—Ç–∏ —Å—É—Å—ñ–¥–∞\n' +
        'üîó /share YYYY-MM - –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑–≤—ñ—Ç–æ–º\n' +
        '‚ùì /help - –î–æ–≤—ñ–¥–∫–∞',
        {
          reply_markup: {
            keyboard: [
              [{ text: 'üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è' }, { text: 'üìä –°—Ç–∞—Ç—É—Å' }],
              [{ text: 'üìà –ó–≤—ñ—Ç–∏' }, { text: 'üí∞ –¢–∞—Ä–∏—Ñ–∏' }]
            ],
            resize_keyboard: true
          }
        }
      );
      logger.info('Owner start message sent successfully');
    } else if (ctx.userRole === 'NEIGHBOR') {
      await ctx.reply(
        `–ü—Ä–∏–≤—ñ—Ç, ${userName}! üëã\n\n` +
        '–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ —Å—É—Å—ñ–¥. –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n' +
        'üëÄ /view YYYY-MM - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å\n' +
        '‚úÖ /confirm YYYY-MM - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç\n' +
        '‚ùì /help - –î–æ–≤—ñ–¥–∫–∞',
        {
          reply_markup: {
            keyboard: [
              [{ text: 'üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç' }],
              [{ text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç' }]
            ],
            resize_keyboard: true
          }
        }
      );
    } else {
      // Guest user - need authorization
      await ctx.reply(
        `–ü—Ä–∏–≤—ñ—Ç, ${userName}! üëã\n\n` +
        '–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.\n' +
        '–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:',
        {
          reply_markup: {
            keyboard: [[{
              text: 'üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
              request_contact: true
            }]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      );
    }
  });

  // Help command
  bot.command('help', async (ctx) => {
    if (ctx.isOwner) {
      await ctx.reply(
        'üìñ <b>–î–æ–≤—ñ–¥–∫–∞ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞</b>\n\n' +
        '<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n' +
        'üÜï <code>/new</code> - –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑–∞—Ä—è–¥–∫–∏\n' +
        'üèÅ <code>/finish</code> - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é\n' +
        'üìä <code>/status</code> - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å\n\n' +
        '<b>–ó–≤—ñ—Ç–∏ —Ç–∞ —Ç–∞—Ä–∏—Ñ–∏:</b>\n' +
        'üìà <code>/report 2025-01</code> - –ó–≤—ñ—Ç –∑–∞ —Å—ñ—á–µ–Ω—å 2025\n' +
        'üí∞ <code>/tariff 2025-01 5.50</code> - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ 5.50 –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥\n\n' +
        '<b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—É—Å—ñ–¥–∞–º–∏:</b>\n' +
        'üë• <code>/setneighbor</code> - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å—É—Å—ñ–¥–∞\n' +
        'üîó <code>/share 2025-01</code> - –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑–≤—ñ—Ç–æ–º –∑ —Å—É—Å—ñ–¥–æ–º\n\n' +
        '<b>–ü–æ—Ä—è–¥–æ–∫ —Ä–æ–±–æ—Ç–∏:</b>\n' +
        '1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç–∞—Ä–∏—Ñ: <code>/tariff 2025-01 5.50</code>\n' +
        '2. –†–æ–∑–ø–æ—á–Ω—ñ—Ç—å —Å–µ—Å—ñ—é: <code>/new</code>\n' +
        '3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –î–û —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç\n' +
        '4. –ó–∞–≤–µ—Ä—à—ñ—Ç—å —Å–µ—Å—ñ—é: <code>/finish</code>\n' +
        '5. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ü–Ü–°–õ–Ø —Ç–∞ –µ–∫—Ä–∞–Ω–∞ –∑–∞—Ä—è–¥–∫–∏\n' +
        '6. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Å–µ—Å—ñ—é\n' +
        '7. –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –∑–≤—ñ—Ç: <code>/report 2025-01</code>',
        { parse_mode: 'HTML' }
      );
    } else if (ctx.userRole === 'NEIGHBOR') {
      await ctx.reply(
        'üìñ <b>–î–æ–≤—ñ–¥–∫–∞ –¥–ª—è —Å—É—Å—ñ–¥–∞</b>\n\n' +
        'üëÄ <code>/view 2025-01</code> - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–≤—ñ—Ç –∑–∞ —Å—ñ—á–µ–Ω—å 2025\n' +
        '‚úÖ <code>/confirm 2025-01</code> - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–≤—ñ—Ç –∑–∞ —Å—ñ—á–µ–Ω—å 2025\n\n' +
        '<b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</b>\n' +
        '1. –í–ª–∞—Å–Ω–∏–∫ –Ω–∞–¥—Å–∏–ª–∞—î –≤–∞–º –∑–≤—ñ—Ç –∞–±–æ OTP-–ø–æ—Å–∏–ª–∞–Ω–Ω—è\n' +
        '2. –í–∏ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î—Ç–µ –¥–µ—Ç–∞–ª—ñ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—é\n' +
        '3. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Å—É–º—É –¥–æ —Å–ø–ª–∞—Ç–∏\n\n' +
        '–í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –±–µ–∑–ø–µ—á–Ω–æ, –≤–∏ –±–∞—á–∏—Ç–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.',
        { parse_mode: 'HTML' }
      );
    }
  });

  // Owner-only commands
  bot.command('new', (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }
    return handleNewSession(ctx);
  });

  bot.command('finish', (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }
    return handleFinishSession(ctx);
  });

  bot.command('status', (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }
    return handleStatus(ctx);
  });

  // Add missing commands
  bot.command('report', (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }
    return handleReport(ctx);
  });

  bot.command('tariff', (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }
    return handleTariff(ctx);
  });

  bot.command('setneighbor', (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }
    return ctx.reply('üë• –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—É—Å—ñ–¥—ñ–≤ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ë—É–¥–µ –¥–æ–¥–∞–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!');
  });

  bot.command('share', (ctx) => {
    if (!ctx.isOwner) {
      return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É.');
    }
    return ctx.reply('üîó –§—É–Ω–∫—Ü—ñ—è –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑–≤—ñ—Ç–æ–º –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ë—É–¥–µ –¥–æ–¥–∞–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!');
  });

  // Handlers for commands (to be implemented)
  async function handleNewSession(ctx) {
    await ctx.reply(
      'üÜï <b>–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑–∞—Ä—è–¥–∫–∏</b>\n\n' +
      '–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ <b>–î–û</b> –∑–∞—Ä—è–¥–∫–∏.\n\n' +
      'üì∏ <b>–í–∞–∂–ª–∏–≤–æ:</b> –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —è–∫ <b>–î–æ–∫—É–º–µ–Ω—Ç/–§–∞–π–ª</b>, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ EXIF-–¥–∞–Ω—ñ.\n\n' +
      'üí° <i>–ü—ñ–¥–∫–∞–∑–∫–∞: –£ Telegram –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ –≤–∏–±–µ—Ä—ñ—Ç—å "–ë–µ–∑ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è" –∞–±–æ "–Ø–∫ —Ñ–∞–π–ª".</i>',
      { 
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –î–û', callback_data: 'send_before_photo' }
          ]]
        }
      }
    );
  }

  async function handleFinishSession(ctx) {
    // Import session functions
    const { getActiveSession, finishSession } = await import('../../services/sessiondb.js');
    
    try {
      // Check if there's an active session
      const activeSession = await getActiveSession(ctx.from.id);
      
      if (!activeSession) {
        await ctx.reply(
          '‚ùå <b>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó</b>\n\n' +
          '–ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑ –∫–Ω–æ–ø–∫–∏ "üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è"',
          { parse_mode: 'HTML' }
        );
        return;
      }
      
      // Mark session as finished
      await finishSession(activeSession.id);
      
      await ctx.reply(
        'üèÅ <b>–°–µ—Å—ñ—é –∑–∞—Ä—è–¥–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n' +
        `üÜî –°–µ—Å—ñ—è: #${activeSession.id}\n` +
        `üïê –ü–æ—á–∞—Ç–æ–∫: ${activeSession.startedAt.toLocaleString('uk-UA')}\n` +
        `‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString('uk-UA')}\n\n` +
        '–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å:\n' +
        'üì∏ <b>–§–æ—Ç–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ü–Ü–°–õ–Ø</b> –∑–∞—Ä—è–¥–∫–∏ (–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)\n' +
        'üì± <b>–§–æ—Ç–æ –µ–∫—Ä–∞–Ω–∞ –∑–∞—Ä—è–¥–∫–∏</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)\n\n' +
        'üí° –ú–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–±–∏–¥–≤–∞ —Ñ–æ—Ç–æ —É –±—É–¥—å-—è–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É.\n' +
        'üìÑ –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ.',
        { 
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üì∏ –§–æ—Ç–æ –ü–Ü–°–õ–Ø', callback_data: 'send_after_photo' }],
              [{ text: 'üì± –§–æ—Ç–æ –µ–∫—Ä–∞–Ω–∞', callback_data: 'send_screen_photo' }],
              [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –µ–∫—Ä–∞–Ω–∞', callback_data: 'complete_without_screen' }]
            ]
          }
        }
      );
      
    } catch (error) {
      logger.error('Error finishing session:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  async function handleStatus(ctx) {
    await ctx.reply(
      'üìä <b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å</b>\n\n' +
      'üîÑ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: 0\n' +
      'üìÖ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö\n' +
      'üí∞ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n' +
      'üìà –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ <code>/report YYYY-MM</code>',
      { parse_mode: 'HTML' }
    );
  }

  // Report handler
  async function handleReport(ctx) {
    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length === 0) {
      // Show available months
      const availableMonths = await getAvailableReportMonths(ctx.from.id);
      const monthsList = availableMonths.map(m => `‚Ä¢ /report ${m.yearMonth} - ${m.displayName}`).join('\n');
      
      await ctx.reply(
        'üìà <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∑–≤—ñ—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—ñ:</b>\n\n' +
        monthsList + '\n\n' +
        'üí° <i>–ü—Ä–∏–∫–ª–∞–¥: /report 2025-08</i>',
        { parse_mode: 'HTML' }
      );
      return;
    }
    
    const yearMonth = args[0];
    
    // Validate format YYYY-MM
    if (!/^\d{4}-\d{2}$/.test(yearMonth)) {
      await ctx.reply(
        '‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É</b>\n\n' +
        '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM\n' +
        '–ü—Ä–∏–∫–ª–∞–¥: <code>/report 2025-08</code>',
        { parse_mode: 'HTML' }
      );
      return;
    }
    
    try {
      // Show report options
      await ctx.reply(
        `üìä <b>–ó–≤—ñ—Ç –∑–∞ ${yearMonth}</b>\n\n` +
        '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—É:',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìÑ –ö–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç', callback_data: `report_summary_${yearMonth}` },
                { text: 'üìã PDF –∑–≤—ñ—Ç', callback_data: `report_pdf_${yearMonth}` }
              ],
              [
                { text: 'üìä CSV —Ñ–∞–π–ª', callback_data: `report_csv_${yearMonth}` }
              ]
            ]
          }
        }
      );
      
    } catch (error) {
      logger.error('Error in report handler:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  // Tariff handler
  async function handleTariff(ctx) {
    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length === 0) {
      // Show all tariffs
      try {
        const tariffs = await getAllTariffs();
        
        if (tariffs.length === 0) {
          await ctx.reply(
            'üí∞ <b>–¢–∞—Ä–∏—Ñ–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ</b>\n\n' +
            '–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ:\n' +
            '<code>/tariff 2025-08 7.41</code>\n\n' +
            'üí° <i>–§–æ—Ä–º–∞—Ç: /tariff YYYY-MM —Ü—ñ–Ω–∞_–∑–∞_–∫–í—Ç¬∑–≥–æ–¥</i>',
            { parse_mode: 'HTML' }
          );
          return;
        }
        
        const tariffsText = tariffs.map(t => 
          `‚Ä¢ ${t.yearMonth}: <b>${t.priceUahPerKwh.toFixed(2)} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥</b>${t.sourceNote ? ` (${t.sourceNote})` : ''}`
        ).join('\n');
        
        await ctx.reply(
          'üí∞ <b>–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏:</b>\n\n' +
          tariffsText + '\n\n' +
          'üìù –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π: <code>/tariff YYYY-MM —Ü—ñ–Ω–∞</code>\n' +
          'üí° –ü—Ä–∏–∫–ª–∞–¥: <code>/tariff 2025-08 7.41</code>',
          { parse_mode: 'HTML' }
        );
        
      } catch (error) {
        logger.error('Error getting tariffs:', error);
        await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–∞—Ä–∏—Ñ—ñ–≤.');
      }
      return;
    }
    
    if (args.length !== 2) {
      await ctx.reply(
        '‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏</b>\n\n' +
        '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: <code>/tariff YYYY-MM —Ü—ñ–Ω–∞</code>\n' +
        '–ü—Ä–∏–∫–ª–∞–¥: <code>/tariff 2025-08 7.41</code>',
        { parse_mode: 'HTML' }
      );
      return;
    }
    
    const [yearMonth, priceStr] = args;
    
    // Validate format YYYY-MM
    if (!/^\d{4}-\d{2}$/.test(yearMonth)) {
      await ctx.reply(
        '‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É</b>\n\n' +
        '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM\n' +
        '–ü—Ä–∏–∫–ª–∞–¥: <code>/tariff 2025-08 7.41</code>',
        { parse_mode: 'HTML' }
      );
      return;
    }
    
    // Parse price (handle both comma and dot)
    const cleanPrice = priceStr.replace(',', '.');
    const price = parseFloat(cleanPrice);
    
    if (isNaN(price) || price <= 0 || price > 100) {
      await ctx.reply(
        '‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ü—ñ–Ω–∞</b>\n\n' +
        '–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0.01 –¥–æ 100.00 –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥\n' +
        '–ü—Ä–∏–∫–ª–∞–¥: <code>/tariff 2025-08 7.41</code>',
        { parse_mode: 'HTML' }
      );
      return;
    }
    
    try {
      const tariff = await setTariff(yearMonth, price, '–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–ª–∞—Å–Ω–∏–∫–æ–º');
      
      await ctx.reply(
        '‚úÖ <b>–¢–∞—Ä–∏—Ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n' +
        `üìÖ –ü–µ—Ä—ñ–æ–¥: <b>${yearMonth}</b>\n` +
        `üí∞ –¶—ñ–Ω–∞: <b>${price.toFixed(2)} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥</b>\n\n` +
        'üí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—ó –∑–∞—Ä—è–¥–∫–∏ –∑–∞ —Ü–∏–º —Ç–∞—Ä–∏—Ñ–æ–º.',
        { parse_mode: 'HTML' }
      );
      
    } catch (error) {
      logger.error('Error setting tariff:', error);
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–∞—Ä–∏—Ñ—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  logger.info('Bot commands initialized');
}