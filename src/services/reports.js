import PDFDocument from 'pdfkit';
import { createObjectCsvStringifier } from 'csv-writer';
import { logger } from '../utils/logger.js';
import { getSessionsForMonth, getMonthlyStats } from './sessiondb.js';
import fs from 'fs';
import path from 'path';

// Generate monthly report in PDF format
export async function generateMonthlyPDF(ownerId, yearMonth) {
  try {
    const sessions = await getSessionsForMonth(ownerId, yearMonth);
    const stats = await getMonthlyStats(ownerId, yearMonth);
    
    // Create PDF document
    const doc = new PDFDocument({ margin: 50 });
    
    // Title
    doc.fontSize(20)
       .text('–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—é –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—è', 50, 50);
    
    doc.fontSize(14)
       .text(`–ü–µ—Ä—ñ–æ–¥: ${yearMonth}`, 50, 80)
       .text(`–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: ${new Date().toLocaleDateString('uk-UA')}`, 50, 100);
    
    // Summary statistics
    doc.fontSize(16)
       .text('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 50, 140);
    
    doc.fontSize(12)
       .text(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π –∑–∞—Ä—è–¥–∫–∏: ${stats.totalSessions}`, 70, 170)
       .text(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Å–µ—Å—ñ–π: ${stats.completedSessions}`, 70, 190)
       .text(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ–∂–∏—Ç–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó: ${stats.totalKwh} –∫–í—Ç¬∑–≥–æ–¥`, 70, 210)
       .text(`–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: ${stats.totalAmount} –≥—Ä–Ω`, 70, 230)
       .text(`–°–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞—Ä–∏—Ñ: ${stats.averageTariff} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥`, 70, 250);
    
    // Sessions table
    if (sessions.length > 0) {
      doc.fontSize(16)
         .text('–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ —Å–µ—Å—ñ–π –∑–∞—Ä—è–¥–∫–∏', 50, 290);
      
      let yPosition = 320;
      
      // Table headers
      doc.fontSize(10)
         .text('–î–∞—Ç–∞/—á–∞—Å', 60, yPosition)
         .text('–î–û (–∫–í—Ç¬∑–≥–æ–¥)', 140, yPosition)
         .text('–ü–Ü–°–õ–Ø (–∫–í—Ç¬∑–≥–æ–¥)', 220, yPosition)
         .text('–°–ø–æ–∂–∏—Ç–æ (–∫–í—Ç¬∑–≥–æ–¥)', 310, yPosition)
         .text('–°—É–º–∞ (–≥—Ä–Ω)', 410, yPosition)
         .text('–°—Ç–∞—Ç—É—Å', 480, yPosition);
      
      yPosition += 20;
      
      // Draw line under headers
      doc.moveTo(50, yPosition)
         .lineTo(550, yPosition)
         .stroke();
      
      yPosition += 10;
      
      // Session rows
      for (const session of sessions) {
        if (yPosition > 750) {
          doc.addPage();
          yPosition = 50;
        }
        
        const startDate = new Date(session.startedAt).toLocaleDateString('uk-UA');
        const startTime = new Date(session.startedAt).toLocaleTimeString('uk-UA', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        doc.fontSize(9)
           .text(`${startDate} ${startTime}`, 60, yPosition)
           .text(session.meterBefore?.toFixed(2) || '-', 140, yPosition)
           .text(session.meterAfter?.toFixed(2) || '-', 220, yPosition)
           .text(session.kwhCalculated?.toFixed(2) || '-', 310, yPosition)
           .text(session.amountUah?.toFixed(2) || '-', 410, yPosition)
           .text(session.state === 'completed' ? '‚úÖ' : '‚è≥', 480, yPosition);
        
        yPosition += 15;
      }
    }
    
    // Footer
    doc.fontSize(8)
       .text('ü§ñ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –æ–±–ª—ñ–∫—É –∑–∞—Ä—è–¥–∫–∏ –µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—è', 50, 750)
       .text('üìß –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è: eldar@example.com', 50, 765);
    
    // End document and return buffer
    return new Promise((resolve, reject) => {
      const chunks = [];
      
      doc.on('data', chunk => chunks.push(chunk));
      doc.on('end', () => {
        const pdfBuffer = Buffer.concat(chunks);
        logger.info(`PDF report generated for ${ownerId}, period ${yearMonth}`);
        resolve(pdfBuffer);
      });
      doc.on('error', reject);
      
      doc.end();
    });
    
  } catch (error) {
    logger.error('Error generating PDF report:', error);
    throw error;
  }
}

// Generate monthly report in CSV format
export async function generateMonthlyCSV(ownerId, yearMonth) {
  try {
    const sessions = await getSessionsForMonth(ownerId, yearMonth);
    const stats = await getMonthlyStats(ownerId, yearMonth);
    
    // CSV header with metadata as first rows
    const metadataRows = [
      ['–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—é –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ –µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—è'],
      [`–ü–µ—Ä—ñ–æ–¥: ${yearMonth}`],
      [`–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: ${new Date().toLocaleDateString('uk-UA')}`],
      [''],
      ['–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
      [`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π –∑–∞—Ä—è–¥–∫–∏: ${stats.totalSessions}`],
      [`–ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Å–µ—Å—ñ–π: ${stats.completedSessions}`],
      [`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ–∂–∏—Ç–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó: ${stats.totalKwh} –∫–í—Ç¬∑–≥–æ–¥`],
      [`–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: ${stats.totalAmount} –≥—Ä–Ω`],
      [`–°–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞—Ä–∏—Ñ: ${stats.averageTariff} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥`],
      [''],
      ['–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ —Å–µ—Å—ñ–π –∑–∞—Ä—è–¥–∫–∏'],
      ['']
    ];
    
    // Session data in CSV format
    const csvStringifier = createObjectCsvStringifier({
      header: [
        { id: 'date', title: '–î–∞—Ç–∞' },
        { id: 'time', title: '–ß–∞—Å' },
        { id: 'meterBefore', title: '–ü–æ–∫–∞–∑–Ω–∏–∫ –î–û (–∫–í—Ç¬∑–≥–æ–¥)' },
        { id: 'meterAfter', title: '–ü–æ–∫–∞–∑–Ω–∏–∫ –ü–Ü–°–õ–Ø (–∫–í—Ç¬∑–≥–æ–¥)' },
        { id: 'kwhUsed', title: '–°–ø–æ–∂–∏—Ç–æ (–∫–í—Ç¬∑–≥–æ–¥)' },
        { id: 'tariff', title: '–¢–∞—Ä–∏—Ñ (–≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥)' },
        { id: 'amount', title: '–°—É–º–∞ (–≥—Ä–Ω)' },
        { id: 'status', title: '–°—Ç–∞—Ç—É—Å' }
      ]
    });
    
    const sessionData = sessions.map(session => ({
      date: new Date(session.startedAt).toLocaleDateString('uk-UA'),
      time: new Date(session.startedAt).toLocaleTimeString('uk-UA', { 
        hour: '2-digit', 
        minute: '2-digit' 
      }),
      meterBefore: session.meterBefore?.toFixed(2) || '',
      meterAfter: session.meterAfter?.toFixed(2) || '',
      kwhUsed: session.kwhCalculated?.toFixed(2) || '',
      tariff: session.tariffValue?.toFixed(2) || '',
      amount: session.amountUah?.toFixed(2) || '',
      status: session.state === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—ñ'
    }));
    
    // Create clean CSV format
    const metadataText = metadataRows.map(row => row.join(',')).join('\n');
    const csvDataPart = csvStringifier.getHeaderString() + 
                       csvStringifier.stringifyRecords(sessionData);
    
    const csvContent = metadataText + '\n\n' + csvDataPart;
    
    // Add BOM for proper UTF-8 encoding in Excel
    const utf8BOM = '\uFEFF';
    const finalContent = utf8BOM + csvContent;
    
    logger.info(`CSV report generated for ${ownerId}, period ${yearMonth}`);
    return Buffer.from(finalContent, 'utf8');
    
  } catch (error) {
    logger.error('Error generating CSV report:', error);
    throw error;
  }
}

// Generate simple text summary report
export async function generateMonthlySummary(ownerId, yearMonth) {
  try {
    const stats = await getMonthlyStats(ownerId, yearMonth);
    
    const summary = `üìä <b>–ó–≤—ñ—Ç –∑–∞ ${yearMonth}</b>\n\n` +
      `üîã –°–µ—Å—ñ–π –∑–∞—Ä—è–¥–∫–∏: ${stats.totalSessions}\n` +
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedSessions}\n` +
      `‚ö° –°–ø–æ–∂–∏—Ç–æ: <b>${stats.totalKwh}</b> –∫–í—Ç¬∑–≥–æ–¥\n` +
      `üí∞ –î–æ —Å–ø–ª–∞—Ç–∏: <b>${stats.totalAmount}</b> –≥—Ä–Ω\n` +
      `üí¥ –°–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞—Ä–∏—Ñ: ${stats.averageTariff} –≥—Ä–Ω/–∫–í—Ç¬∑–≥–æ–¥\n\n` +
      `üìÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('uk-UA')}`;
    
    logger.info(`Summary report generated for ${ownerId}, period ${yearMonth}`);
    return summary;
    
  } catch (error) {
    logger.error('Error generating summary report:', error);
    throw error;
  }
}

// Save report to temporary file and return file path
export async function saveReportToFile(buffer, filename) {
  try {
    const tempDir = path.join(process.cwd(), 'temp');
    
    // Ensure temp directory exists
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const filePath = path.join(tempDir, filename);
    fs.writeFileSync(filePath, buffer);
    
    logger.info(`Report saved to file: ${filePath}`);
    return filePath;
    
  } catch (error) {
    logger.error('Error saving report to file:', error);
    throw error;
  }
}

// Clean up temporary files
export function cleanupTempFile(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      logger.info(`Temporary file cleaned up: ${filePath}`);
    }
  } catch (error) {
    logger.error('Error cleaning up temporary file:', error);
  }
}

// Get available report months for user
export async function getAvailableReportMonths(ownerId) {
  try {
    // For now, we'll return the current month and previous 6 months
    const months = [];
    const now = new Date();
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
      const yearMonth = date.toISOString().slice(0, 7);
      months.push({
        yearMonth,
        displayName: date.toLocaleDateString('uk-UA', { 
          year: 'numeric', 
          month: 'long' 
        })
      });
    }
    
    return months;
    
  } catch (error) {
    logger.error('Error getting available report months:', error);
    throw error;
  }
}